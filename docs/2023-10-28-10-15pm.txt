var db = SpreadsheetApp.openByUrl("https://docs.google.com/spreadsheets/d/1-ASpPWl6lCGf21NoVpcIoPWfJOkNFsPEZAZmDsIHM8I/edit#gid=125923244");
const sheet = db.getSheetByName("Projects");
var emailTo = "hirushadeshanit@gmail.com "

function doGet(req) {
  var action = req.parameter.action;
  switch (action) {
    case "get-projects":
      return ContentService
        .createTextOutput(JSON.stringify(getProjects()))
        .setMimeType(ContentService.MimeType.JSON);
      break;
    case "get-4projects":
      return ContentService
        .createTextOutput(JSON.stringify(get4Projects()))
        .setMimeType(ContentService.MimeType.JSON);
      break;
    case "get-students":
      return ContentService
        .createTextOutput(JSON.stringify(getStudents()))
        .setMimeType(ContentService.MimeType.JSON);
      break;
    case "get-mentors":
      return ContentService
        .createTextOutput(JSON.stringify(getMentors()))
        .setMimeType(ContentService.MimeType.JSON);
      break;
    default:
      return ContentService //.createTextOutput("Unknown Action");
      .createTextOutput(JSON.stringify({ error: "Unknown Action" }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}


function doPost(req) {
  var action = req.parameter.action;
  switch (action) {
    case "add-project":
      return addProject(req.postData.contents)
      break;
    case "add-student":
      return addStudent(req.postData.contents)
      break;
    case "add-mentor":
      return addMentor(req.postData.contents)
      break;
    case "expression-of-interest":
      {
        try{
          var data = req.parameter.fileContent;
          var filename = req.parameter.filename;
          var studentname = req.parameter.studentname;
          var teamname = req.parameter.teamname;
          var result = uploadFileToGoogleDrive(data,filename,teamname,studentname,req);
          //return ContentService //return json results
            //.createTextOutput(
            // JSON.stringify({"result" : "success", 
            //                     "data": JSON.stringify(result) }))
            // .setMimeType(ContentService.MimeType.JSON);   
          return ContentService.createTextOutput("Success"); 

        } catch(error){
          //Logger.log(error);
          //return ContentService 
          // .createTextOutput(JSON.stringify({"result": "error","error": error}))
          // .setMimeType(ContentService.MimeType.JSON);
          return ContentService.createTextOutput("Fail"); 
        }
      }
    case "contact-us":
      return contactUs(req.postData.contents)
      break;
    default:
      return ContentService.createTextOutput("Unknown Action");
  }
}

//get4projects
function get4Projects() {
  var sheetObject = db.getSheetByName("Projects");
  var data = {};
  data.records = _readLastUpdatedData(sheetObject, 4);
  //Logger.log(data);
  return data;
}

function _readLastUpdatedData(sheet, limit) {
  var data = [];
  var values = sheet.getDataRange().getValues();
  var header = values[0];
  for (var i = values.length - 1; i > 0 && data.length < limit; i--) {
    var row = values[i];
    var record = {};
    for (var j = 0; j < header.length; j++) {
      record[header[j]] = row[j];
    }
    data.push(record);
  }
  return data;
}

// </get4project>



//add projects
function addProject(contents) {
  var project = JSON.parse(contents);
  var sheetObject = db.getSheetByName("Projects");
  var timestamp = Date.now();
  var currentTime = new Date().toLocaleString(); // Full Datetime

  var rowData = sheetObject.appendRow([
    timestamp,
    project.Title,
    project.Company,
    project.Goal,
    project.Tasks,
    project.Technology,
    project.Minimum_Team,
    currentTime,
    project.Duration,
    project.Details_Link,
    project.Contact_Phone,
    project.Contact_Email,
    project.Contact_Name,
    false
  ]);

  return ContentService
    .createTextOutput(JSON.stringify({ "success": project.Title }))
    .setMimeType(ContentService.MimeType.JSON);
}

//add students
function addStudent(contents) {
  var project = JSON.parse(contents);
  var sheetObject = db.getSheetByName("Students");
  var sheetData = sheetObject.getDataRange().getValues();
  var nicIndex = 1; // Assuming NIC is in the second column (0-based index)

  // Check for duplicate NIC
  for (var i = 1; i < sheetData.length; i++) { // Start from row 1 (skipping headers)
    if (sheetData[i][nicIndex] === project.NIC) {
      return ContentService
        .createTextOutput(JSON.stringify({"error": "NIC number already exists"}))
        .setMimeType(ContentService.MimeType.JSON);    
    }
  }

  var timestamp = Date.now();
  var currentTime = new Date().toLocaleString(); // Full Datetime

  var rowData = sheetObject.appendRow([
    timestamp,
    project.NIC,
    "",
    project.FName,
    project.Lname,
    project.Mobile1,
    project.Mobile2,
    project.Email,
    project.Address,
    project.Student_Degree,
    project.University,
    currentTime,
    false
  ]);

  return ContentService
    .createTextOutput(JSON.stringify({ "success": project.FName }))
    .setMimeType(ContentService.MimeType.JSON);
}

//add mentors
function addMentor(contents) {
  var project = JSON.parse(contents);
  var sheetObject = db.getSheetByName("Mentors");
  var sheetData = sheetObject.getDataRange().getValues();
  var nicIndex = 1; // Assuming NIC is in the second column (0-based index)

  // Check for duplicate NIC
  for (var i = 1; i < sheetData.length; i++) { // Start from row 1 (skipping headers)
    if (sheetData[i][nicIndex] === project.NIC) {
      return ContentService
        .createTextOutput(JSON.stringify({"error": "NIC number already exists"}))
        .setMimeType(ContentService.MimeType.JSON);    
    }
  }

  var timestamp = Date.now();
  var currentTime = new Date().toLocaleString(); // Full Datetime

  var rowData = sheetObject.appendRow([
    timestamp,
    project.NIC,
    project.FName,
    project.Lname,
    project.Mobile1,
    project.Mobile2,
    project.Email,
    project.LinkedIn,
    project.Company,
    project.Industry,
    project.Interest_Area,
    currentTime,
    false
  ]);

  return ContentService
    .createTextOutput(JSON.stringify({ "success": project.FName }))
    .setMimeType(ContentService.MimeType.JSON);

}

//add expression of interest
//function addInterest(contents) {
  //var project = JSON.parse(contents);
  //var sheetObject = db.getSheetByName("Teams");
  //var timestamp = Date.now();
  //var currentTime = new Date().toLocaleString(); // Full Datetime

  //var rowData = sheetObject.appendRow([
    //timestamp,
    //"",
    //project.FName,
    //project.Lname,
    //project.Mobile1,
    //project.Attach,
    //currentTime,
    //false
  //]);

  //return ContentService
    //.createTextOutput(JSON.stringify({ "success": project.FName }))
    //.setMimeType(ContentService.MimeType.JSON);
//}


//get all projects
function getProjects() {
  var sheetObject = db.getSheetByName("Projects");
  var data = {};

  data.records = _readData(sheetObject);

  return data;
  //Logger.log(data);
}

function _readData(sheetObject, properties) {

  if (typeof properties == "undefined") {
    properties = _getHeaderRow(sheetObject);
    properties = properties.map(function (p) {
      return p.replace(/\s+/g, '_');
    });
  }

  var rows = _getDataRows(sheetObject),
    data = [];

  for (var r = 0, l = rows.length; r < l; r++) {
    var row = rows[r],
      record = {};

    for (var p in properties) {
      record[properties[p]] = row[p];
    }

    if(record["Active"]) {
      data.push(record);
    }

  }

  return data;
}

function _getDataRows(sheetObject) {
  var sh = sheetObject;

  return sh.getRange(2, 1, sh.getLastRow() - 1, sh.getLastColumn()).getValues();
}
function _getHeaderRow(sheetObject) {
  var sh = sheetObject;

  return sh.getRange(1, 1, 1, sh.getLastColumn()).getValues()[0];
}

//end of get all projects

//get students data
function getStudents() {
  var sheetObject = db.getSheetByName("Students");
  var data = {};

  data.records = _readDataS(sheetObject);

  return data;
  //Logger.log(data);
}

function _readDataS(sheetObject, properties) {

  if (typeof properties == "undefined") {
    properties = _getHeaderRowS(sheetObject);
    properties = properties.map(function (p) {
      return p.replace(/\s+/g, '_');
    });
  }

  var rows = _getDataRowsS(sheetObject),
    data = [];

  for (var r = 0, l = rows.length; r < l; r++) {
    var row = rows[r],
      record = {};

    for (var p in properties) {
      record[properties[p]] = row[p];
    }

    if(record["Active"]) {
      data.push(record);
    }

  }

  return data;
}

function _getDataRowsS(sheetObject) {
  var sh = sheetObject;

  return sh.getRange(2, 1, sh.getLastRow() - 1, sh.getLastColumn()).getValues();
}
function _getHeaderRowS(sheetObject) {
  var sh = sheetObject;

  return sh.getRange(1, 1, 1, sh.getLastColumn()).getValues()[0];
}

//end of get students data


//get mentors data
function getMentors() {
  var sheetObject = db.getSheetByName("Mentors");
  var data = {};

  data.records = _readDataM(sheetObject);

  return data;
  //Logger.log(data);
}

function _readDataM(sheetObject, properties) {

  if (typeof properties == "undefined") {
    properties = _getHeaderRowM(sheetObject);
    properties = properties.map(function (p) {
      return p.replace(/\s+/g, '_');
    });
  }

  var rows = _getDataRowsM(sheetObject),
    data = [];

  for (var r = 0, l = rows.length; r < l; r++) {
    var row = rows[r],
      record = {};

    for (var p in properties) {
      record[properties[p]] = row[p];
    }

    if(record["Active"]) {
      data.push(record);
    }

  }

  return data;
}

function _getDataRowsM(sheetObject) {
  var sh = sheetObject;

  return sh.getRange(2, 1, sh.getLastRow() - 1, sh.getLastColumn()).getValues();
}
function _getHeaderRowM(sheetObject) {
  var sh = sheetObject;

  return sh.getRange(1, 1, 1, sh.getLastColumn()).getValues()[0];
}

//i added after submit get the email
function contactUs(contents) {
  var project = JSON.parse(contents);
  var sheetObject = db.getSheetByName("Contact Us");
  var timestamp = Date.now();
  var currentTime = new Date().toLocaleString(); // Full Datetime

  var rowData = sheetObject.appendRow([
    timestamp,
    project.Title,
    project.Company,
    project.Goal,
    currentTime,
    false
  ]);

  // Create the email content
  var emailContent = "This User Contact Us:\n" +
                     "Title: " + project.Title + "\n" +
                     "Company: " + project.Company + "\n" +
                     "Goal: " + project.Goal ;

  // Send the email
  MailApp.sendEmail({
    to: 'hirushadeshanit@gmail.com', // Replace with the recipient's email address
    subject: 'New User Contact Us',
    body: emailContent
  });

  return ContentService
    .createTextOutput(JSON.stringify({ "success": project.Title }))
    .setMimeType(ContentService.MimeType.JSON);
}

//add expression of interest code
var SCRIPT_PROP = PropertiesService.getScriptProperties();
var doc = SpreadsheetApp.getActiveSpreadsheet();
SCRIPT_PROP.setProperty("key", doc.getId());


function record_data(req,fileUrl){
  try{
    var doc = SpreadsheetApp.openById(SCRIPT_PROP.getProperty("key"));
    var sheet = doc.getSheetByName('Teams')   //select the response sheet

    var headers = sheet.getRange(1,1,1, sheet.getLastColumn()).getValues()[0];
    var nextRow = sheet.getLastRow()+1; //get next row
    var row = [new Date().toLocaleString()];  // first element in the row should always be a timestamp 
    //loop through the header column
    for (var i = 1; i < headers.length; i++) { // start at 1 to avoid the timestamp column
      if (headers[i].length > 0 && headers[i] == "resume") {
        row.push(fileUrl); // add data to the row
      } else if (headers[i].length > 0) {
        // Add data to the row based on the header name
        if (headers[i] === "title") {
          row.push(req.parameter.title); // Add the title parameter
        } else {
          row.push(req.parameter[headers[i]]);
        }
      }
    }
    sheet.getRange(nextRow, 1,1,row.length).setValues([row]);
    //sheet.getRange(newRow, 1, 1, row.length).setValues([row]);
  }
  catch(error){
    Logger.log(req);
  }
  finally{
    return;
  }
}


function uploadFileToGoogleDrive(data, file, teamname, studentname, req){
  try{
    var dropbox = "PDF";
    var folder,folders = DriveApp.getFoldersByName(dropbox);
    
    if (folders.hasNext()){
      folder = folders.next();
    } else{
      folder = DriveApp.createFolder(dropbox);
    }
    var ContentType = data.substring (5,data.indexOf(',')),
      bytes = Utilities.base64Decode(data.substr(data.indexOf('base64,')+7)),
      blob = Utilities.newBlob(bytes, ContentType, file);
      var file = folder.createFolder([teamname,studentname].join("-")).createFile(blob);
      var fileUrl=file.getUrl();

      var html = 

    '<body>'+
      '<h2> Expression of Interest </h2>' +
        '<p>Team Name : '+req.parameters.teamname+'</p>' + 
        '<p>Student Name : '+req.parameters.studentname+'</p>' + 
        '<p>Mentors : '+req.parameters.mentors+'</p>' + 
        '<p>Skill Sets : '+req.parameters.skillsets+'</p>' + 
        '<p>Linked Url : '+req.parameters.linkedinUrl+'</p>' + 
        '<p>File Name : '+req.parameters.filename+'</p>' + 
        '<p><a href = '+file.getUrl()+'>Project Proposal</a></p><br />'+
      '</body>';
    
    record_data(req,fileUrl);

    MailApp.sendEmail(emailTo, "New Expression of Interest Recieved", "New Expression of Interest Request Recieved", {htmlBody:html});
    return file.getUrl();
  }
  
  catch(error){
    Logger.log(req);
  }
}
